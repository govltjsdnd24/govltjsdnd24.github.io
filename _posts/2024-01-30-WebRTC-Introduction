---
categories: [ Study, WebRTC ]
tags: [ webrtc ] 
---

This is another huge topic in the scheme of various web projects. WebRTC allows its users to be able to communicate in real-time with whoever is connected to the same session that the users are located in, allowing the utilization of cameras and microphones, without the need to implement external software. This changed things in a way that small teams of developers and students didn't have to implement things on their own and could just choose to adopt this certain technology into their projects. In fact, it was so efficient and well-built that all of the major real-time communication software like Zoom, Google Meet, and Facebook utilize this piece of innovation.

## Explanation
Let's move on to the essential topic. You might ask : "I get that WebRTC is good and all but... what is WebRTC?" WebRTC is a technology that establishes peer-to-peer-like connection between browsers and maintains it steadfastly, allowing users to trade various types of data with complete ease and reliability. By peer-to-peer-like, I mean that it involves a certain server that initially connects you to your friend, and after that inceptive interception , you can maintain the connection by yourself. This is important because it removes the centralized format of previous communication and also deters the server from being overloaded with traffic, thus failing to keep its users up-to-date with the messages/data that they have to be informed about. WebRTC was a giant leap client/browser-wise, also; in a regular HTTP interaction, a user had to quit the connection after a request-response life-cycle, but in WebRTC, users can maintain connection as long as he/she likes, granting much fluidity to the interchange of data one can have with its peer.
  
## STUN and TURN
As good as WebRTC sounds, there are some restrictions that exist inherently. In order for peers to communicate with each other, they must have each others' IP addresses. However, when they use a firewall or a NAT, they will only be able to get their hands on their private IP address that they use internally. STUN ( Session Traversal Utilities for NAT ) works in a way that it reveals the clients their public IP address that they can use for external communication.... that is, as long as there are no multiple clients in the same network.
Then what if there ARE multiple clients in a network? TURN works in a way that 

## Troubleshooting

 
## Conclusion 



## Reference


